// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	DMux8Way(in=true, sel=address[12..14], a=a, b=b, c=c, d=d, e=e,
	                                       f=f, g=g, h=h);

	/* Need to ensure that h is unset */
	Not(in=h, out=NOTh);

	/* Make firstFour */
	Or(a=a, b=b, out=x);
	Or(a=x, b=c, out=xx);
	Or(a=xx, b=d, out=xxx);
	And(a=xxx, b=NOTh, out=xxxx);
	And(a=xxxx, b=load, out=firstFour);

	/* Make nextTwo */
	Or(a=e, b=f, out=y);
	And(a=y, b=NOTh, out=yy);
	And(a=yy, b=load, out=nextTwo);

	RAM16K(in=in, load=firstFour, address=address[0..13], out=RAMout);
	Screen(in=in, load=nextTwo, address=address[0..12], out=Screenout);
	Keyboard(out=Keyout);

	Mux8Way16(a=RAMout, b=RAMout, c=RAMout, d=RAMout,
		  e=Screenout, f=Screenout, g=Keyout, h=true, /* h = invalid output */
		  sel=address[12..14], out=out);
}
