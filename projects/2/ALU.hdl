// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    /* Pre-setting input x */
    Mux16(a=x, b=false, sel=zx, out=IFzxOUTzero);
    And16(a=IFzxOUTzero, b=true, out=X);
    Not16(in=X, out=NOTX);
    Mux16(a=X, b=NOTX, sel=nx, out=preX);

    /* Pre-setting input y */
    Mux16(a=y, b=false, sel=zy, out=IFzyOUTzero);
    And16(a=IFzyOUTzero, b=true, out=Y);
    Not16(in=Y, out=NOTY);
    Mux16(a=Y, b=NOTY, sel=ny, out=preY);

    /* Set f */
    And16(a=preX, b=preY, out=xANDy);
    Add16(a=preX, b=preY, out=xADDy);
    Mux16(a=xANDy, b=xADDy, sel=f, out=o);

    /* Optionally negate the output */
    Not16(in=o, out=NOTo);

    /* Set ng and agonizingly separate out into its bits for computing zr */
    Mux16(a=o, b=NOTo, sel=no, out=out, out[15]=ng,
                                        out[0]=o0,
                                        out[1]=o1,
                                        out[2]=o2,
                                        out[3]=o3,
                                        out[4]=o4,
                                        out[5]=o5,
                                        out[6]=o6,
                                        out[7]=o7,
                                        out[8]=o8,
                                        out[9]=o9,
                                        out[10]=o10,
                                        out[11]=o11,
                                        out[12]=o12,
                                        out[13]=o13,
                                        out[14]=o14,
                                        out[15]=o15);

    Or(a=o0,   b=o1,  out=zr0);
    Or(a=zr0,  b=o2,  out=zr1);
    Or(a=zr1,  b=o3,  out=zr2);
    Or(a=zr2,  b=o4,  out=zr3);
    Or(a=zr3,  b=o5,  out=zr4);
    Or(a=zr4,  b=o6,  out=zr5);
    Or(a=zr5,  b=o7,  out=zr6);
    Or(a=zr6,  b=o8,  out=zr7);
    Or(a=zr7,  b=o9,  out=zr8);
    Or(a=zr8,  b=o10, out=zr9);
    Or(a=zr9,  b=o11, out=zr10);
    Or(a=zr10, b=o12, out=zr11);
    Or(a=zr11, b=o13, out=zr12);
    Or(a=zr12, b=o14, out=zr13);
    Or(a=zr13, b=o15, out=zr14);
    Not(in=zr14, out=zr);
}
